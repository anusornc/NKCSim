import streamlit as st
import numpy as np
import pandas as pd
from joblib import Parallel, delayed
import plotly.express as px
from stqdm import stqdm  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö progress bar

# ===============================
# 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å UI
# ===============================
st.sidebar.header("‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å")
st.sidebar.caption("‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ")

# 1.1 ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
strategies = st.sidebar.multiselect(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå",
    ["Effectuation", "Causation"],
    default=["Effectuation", "Causation"]
)

# 1.2 ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°
C_values = st.sidebar.multiselect(
    "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô (C)",
    options=[1, 7, 9],
    default=[1, 7, 9],
    max_selections=2
)
rho_values = st.sidebar.multiselect(
    "‡∏™‡∏±‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (rho)",
    options=[0.1, 0.7, 0.9],
    default=[0.1, 0.7, 0.9],
    max_selections=2
)
thresholds = st.sidebar.multiselect(
    "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö",
    options=[5, 6, 7],
    default=[6],
    max_selections=2
)

# 1.3 ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°
seeds_input = st.sidebar.text_input(
    "Random Seeds (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ)",
    "42,123,789"
)

# 1.4 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
with st.sidebar.expander("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"):
    N = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (N)", 10, 1, 100)
    K_EFFECTUATION = st.number_input("K ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Effectuation", 2, 1, N)
    K_CAUSATION = st.number_input("K ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Causation", 5, 1, N)
    TIME_STEPS = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á (TIME_STEPS)", 100, 10, 1000)
    PRE_CHASM_STEPS = st.number_input("‡∏£‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô Chasm (PRE_CHASM_STEPS)", 16, 1, 100)

# ===============================
# 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
# ===============================
def run_simulation(strategy_k, C, rho, threshold, seed):
    np.random.seed(seed)
    
    # 1. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
    variables = np.random.normal(loc=5, scale=2, size=N)
    variables = np.clip(variables, 1, 9)
    
    # 2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ K ‡∏ï‡∏±‡∏ß (‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏£‡∏≠‡∏ö‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    selected_vars = np.random.choice(N, strategy_k, replace=False)
    initial_mean = np.mean(variables[selected_vars])
    
    pre_adoption = 0
    post_adoption = 0
    
    for step in range(TIME_STEPS):
        if step > 0:
            # 3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏î‡πâ‡∏ß‡∏¢ Mean Reversion (‡∏™‡∏π‡∏ï‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
            noise = np.random.normal(0, scale=C, size=strategy_k)
            variables[selected_vars] = (
                rho * variables[selected_vars] + 
                (1 - rho) * initial_mean + 
                noise  # ‡πÑ‡∏°‡πà‡∏Ñ‡∏π‡∏ì‡∏î‡πâ‡∏ß‡∏¢ (1 - rho)
            )
            variables = np.clip(variables, 1, 9)
        
        # 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå
        avg = np.mean(variables[selected_vars])
        if avg >= threshold:
            if step < PRE_CHASM_STEPS:
                pre_adoption += 1
            else:
                post_adoption += 1
    
    return {
        '‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå': 'Effectuation' if strategy_k == K_EFFECTUATION else 'Causation',
        'C': C,
        'rho': rho,
        '‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö': threshold,
        'seed': seed,
        'pre_adoption_rate': round(pre_adoption / PRE_CHASM_STEPS * 100, 2),
        'post_adoption_rate': round(post_adoption / (TIME_STEPS - PRE_CHASM_STEPS) * 100, 2)
    }

# ===============================
# 3. ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á
# ===============================
if st.sidebar.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á"):
    # 3.1 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Input
    if not strategies:
        st.error("‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå")
        st.stop()
        
    try:
        seeds = [int(s.strip()) for s in seeds_input.split(",")]
    except ValueError:
        st.error("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Random Seeds (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 42,123,789)")
        st.stop()
        
    # 3.2 ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
    k_list = []
    if "Effectuation" in strategies:
        k_list.append(K_EFFECTUATION)
    if "Causation" in strategies:
        k_list.append(K_CAUSATION)
        
    total_scenarios = len(k_list) * len(C_values) * len(rho_values) * len(thresholds) * len(seeds)
    if total_scenarios > 100:
        st.warning(f"‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô {total_scenarios} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô)")

    # 3.3 ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
    params = []
    for k in k_list:
        for C in C_values:
            for rho in rho_values:
                for thresh in thresholds:
                    for seed in seeds:
                        params.append((k, C, rho, thresh, seed))

    # 3.4 ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏ô
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á..."):
        results = Parallel(n_jobs=-1)(delayed(run_simulation)(*p) for p in stqdm(params))

    # 3.5 ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
    df = pd.DataFrame(results)
    summary = df.groupby(['‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå', 'C', 'rho', '‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö']).agg({
        'pre_adoption_rate': ['mean', 'std'],
        'post_adoption_rate': ['mean', 'std']
    }).reset_index()
    summary.columns = ['‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå', 'C', 'rho', '‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö', 
                      'Pre Mean', 'Pre Std', 'Post Mean', 'Post Std']

    # ===============================
    # 4. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    # ===============================
    st.header("üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á")
    
    # 4.1 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ
    st.subheader("‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥")
    st.dataframe(summary.style.format({
        'Pre Mean': '{:.2f}%',
        'Pre Std': '{:.2f}%',
        'Post Mean': '{:.2f}%',
        'Post Std': '{:.2f}%'
    }))
    
    # 4.2 ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    st.subheader("‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö")
    fig = px.line(
        summary,
        x="rho",
        y="Post Mean",
        color="‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå",
        facet_col="C",
        facet_row="‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö",
        title="‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á Chasm",
        labels={"rho": "‡∏™‡∏±‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á", "Post Mean": "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö (%)"},
        category_orders={
            "C": [1, 7, 9],
            "rho": [0.1, 0.7, 0.9],
            "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö": [5, 6, 7]
        }
    )
    st.plotly_chart(fig, use_container_width=True)

    # 4.3 ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    st.subheader("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.download_button(
        "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡πá‡∏°",
        df.to_csv(index=False),
        "simulation_data.csv"
    )
    st.download_button(
        "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥",
        summary.to_csv(index=False),
        "summary.csv"
    )
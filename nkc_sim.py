import streamlit as st
import numpy as np
import pandas as pd
from joblib import Parallel, delayed
import plotly.express as px
import plotly.graph_objects as go

# ===============================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á (‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÅ‡∏ö‡∏ö‡∏•‡∏≠‡∏Å‡∏≤‡∏£‡∏¥‡∏ó‡∏∂‡∏°)
# ===============================
def run_simulation(N, strategy_k, C, rho, threshold, seed, time_steps, pre_chasm_steps):
    np.random.seed(seed)
    
    variables = np.random.normal(loc=5, scale=2, size=N)
    variables = np.clip(variables, 1, 12)  # ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    
    selected_vars = np.random.choice(N, strategy_k, replace=False)
    initial_mean = np.mean(variables[selected_vars])
    
    pre_adoption = 0
    post_adoption = 0
    averages = []
    
    for step in range(time_steps):
        if step > 0:
            noise = np.random.normal(0, scale=C, size=strategy_k)
            # ‡∏õ‡∏£‡∏±‡∏ö trend_factor ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏≠‡∏Å‡∏≤‡∏£‡∏¥‡∏ó‡∏∂‡∏°
            trend_factor = 0.5 * np.log1p(step)
            variables[selected_vars] = (variables[selected_vars] * rho + 
                                       (1 - rho) * initial_mean + 
                                       noise * (1 - rho) + 
                                       trend_factor)
            variables = np.clip(variables, 1, 12)  # ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    
        avg = np.mean(variables[selected_vars])
        averages.append(avg)
        
        if avg >= threshold:
            if step < pre_chasm_steps:
                pre_adoption += 1
            else:
                post_adoption += 1
    
    return {
        '‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå': 'Effectuation' if strategy_k < N/2 else 'Causation',
        'N': N,
        'K': strategy_k,
        'C': C,
        'rho': rho,
        '‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö': threshold,
        'seed': seed,
        '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô Chasm (%)': round(pre_adoption / pre_chasm_steps * 100, 2),
        '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏á Chasm (%)': round(post_adoption / (time_steps - pre_chasm_steps) * 100, 2),
        'averages': averages
    }

# ===============================
# UI ‡∏î‡πâ‡∏ß‡∏¢ Streamlit
# ===============================
st.title("üöÄ NKC Model Simulation (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏•‡∏≠‡∏Å‡∏≤‡∏£‡∏¥‡∏ó‡∏∂‡∏°)")

st.markdown("""
### üìù ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°
‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á **Effectuation** (‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô) ‡πÅ‡∏•‡∏∞ **Causation** (‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á)  
‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏Ç‡πâ‡∏≤‡∏á (Sidebar)
""")

# Sidebar
st.sidebar.header("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á")

# ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
st.sidebar.subheader("‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å")
N = st.sidebar.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (N)", min_value=5, max_value=20, value=10, help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
K_EFFECTUATION = st.sidebar.number_input("K ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Effectuation", min_value=1, max_value=N-1, value=2, help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô")
K_CAUSATION = st.sidebar.number_input("K ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Causation", min_value=1, max_value=N-1, value=5, help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á")

strategies = st.sidebar.multiselect(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå",
    ["Effectuation", "Causation"],
    default=["Effectuation", "Causation"],
    help="Effectuation: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≠‡∏¢ | Causation: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏Å"
)

# ‡∏õ‡∏£‡∏±‡∏ö C_values ‡πÉ‡∏´‡πâ‡∏•‡∏î noise
C_values = st.sidebar.multiselect(
    "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô (C)",
    [1, 2, 3],
    default=[1, 3],
    help="1=‡∏ï‡πà‡∏≥ (‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£), 2=‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á, 3=‡∏™‡∏π‡∏á (‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô)"
)

rho_values = st.sidebar.multiselect(
    "‡∏™‡∏±‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (rho)",
    [0.1, 0.7, 0.9],
    default=[0.1, 0.9],
    help="0.1=‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏£‡πá‡∏ß, 0.7=‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á, 0.9=‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡πâ‡∏≤"
)

thresholds = st.sidebar.multiselect(
    "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö",
    [5, 6, 7],
    default=[5, 7],
    help="‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°"
)

seeds_input = st.sidebar.text_input(
    "Random Seeds (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ)",
    "42, 123",
    help="‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏° (‡πÄ‡∏ä‡πà‡∏ô 42, 123)"
)

# ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
with st.sidebar.expander("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"):
    time_steps = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á", min_value=50, value=100, help="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á")
    pre_chasm_steps = st.sidebar.number_input("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô Chasm", min_value=5, max_value=time_steps-1, value=16, help="‡∏à‡∏∏‡∏î‡πÅ‡∏ö‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô/‡∏´‡∏•‡∏±‡∏á Chasm")
    max_simulations = st.sidebar.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", min_value=1, value=50, help="‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û")

# ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏≤‡∏ü
st.sidebar.subheader("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏£‡∏≤‡∏ü")
graph_type = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏£‡∏≤‡∏ü", ["2D ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå", "3D ‡∏£‡∏ß‡∏° Time Steps", "2D Time Series"], index=0)
if graph_type == "2D ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå":
    y_axis = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏Å‡∏ô Y", 
                                  ["‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô Chasm (%)", "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏á Chasm (%)"], index=1)
    x_axis = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏Å‡∏ô X", ["rho", "C"], index=0)
elif graph_type == "3D ‡∏£‡∏ß‡∏° Time Steps" or graph_type == "2D Time Series":
    color_by = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏ï‡∏≤‡∏°", ["C", "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå"], index=0, help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏™‡∏µ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á C ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå")
    time_step_range = st.sidebar.slider("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á Time Step", 0, 100, (16, 100), help="‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á Time Step")

# ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á
st.sidebar.markdown("---")
if st.sidebar.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á"):
    try:
        seeds = [int(s.strip()) for s in seeds_input.split(",")]
    except ValueError:
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Random Seeds ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ (‡πÄ‡∏ä‡πà‡∏ô 42, 123)")
        st.stop()

    if not strategies:
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå")
        st.stop()
    if not C_values:
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô (C)")
        st.stop()
    if not rho_values:
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏™‡∏±‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (rho)")
        st.stop()
    if not thresholds:
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö")
        st.stop()

    k_list = []
    if "Effectuation" in strategies:
        k_list.append(K_EFFECTUATION)
    if "Causation" in strategies:
        k_list.append(K_CAUSATION)
    
    params = []
    for k in k_list:
        for C in C_values:
            for rho in rho_values:
                for thresh in thresholds:
                    for seed in seeds:
                        params.append((N, k, C, rho, thresh, seed, time_steps, pre_chasm_steps))
    
    if len(params) > max_simulations:
        st.warning(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({len(params)}) ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î ({max_simulations}) ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á {max_simulations} ‡∏ä‡∏∏‡∏î‡πÅ‡∏£‡∏Å")
        params = params[:max_simulations]

    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á..."):
        results = Parallel(n_jobs=-1, max_nbytes=None)(delayed(run_simulation)(*p) for p in params)
    
    df = pd.DataFrame(results)
    
    if df.empty:
        st.error("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå")
        st.stop()

    summary = df.groupby(['‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå', 'C', 'rho', '‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö']).agg({
        '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô Chasm (%)': ['mean', 'std'],
        '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏á Chasm (%)': ['mean', 'std']
    }).reset_index()
    summary.columns = ['‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå', 'C', 'rho', '‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö', 
                      '‡∏Å‡πà‡∏≠‡∏ô Chasm Mean', '‡∏Å‡πà‡∏≠‡∏ô Chasm Std', 
                      '‡∏´‡∏•‡∏±‡∏á Chasm Mean', '‡∏´‡∏•‡∏±‡∏á Chasm Std']

    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î Session State
    if 'history' not in st.session_state or st.session_state.history is None:
        st.session_state.history = []
    st.session_state.history.append(df)
    st.write(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà: {len(st.session_state.history)}")

    st.header("üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á")
    st.dataframe(summary)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü
    if graph_type == "2D ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå":
        for thresh in thresholds:
            st.subheader(f"‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö = {thresh}")
            filtered_df = df[df['‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö'] == thresh]
            if filtered_df.empty:
                st.warning(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö = {thresh}")
                continue
            fig = px.scatter(
                filtered_df,
                x=x_axis,
                y=y_axis,
                color="‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå",
                title=f"{y_axis} (‡πÄ‡∏Å‡∏ì‡∏ë‡πå = {thresh})",
                hover_data=['N', 'K', 'seed', 'C' if x_axis != 'C' else 'rho']
            )
            st.plotly_chart(fig, use_container_width=True)
    
    elif graph_type == "3D ‡∏£‡∏ß‡∏° Time Steps":
        time_data = []
        for result in results:
            for t, avg in enumerate(result['averages']):
                if time_step_range[0] <= t <= time_step_range[1]:
                    time_data.append({
                        '‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå': result['‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå'],
                        'C': result['C'],
                        'rho': result['rho'],
                        '‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö': result['‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö'],
                        'Time Step': t,
                        '‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢': avg
                    })
        time_df = pd.DataFrame(time_data)
        
        if time_df.empty:
            st.error("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü 3D")
            st.stop()
            
        sample_df = time_df.sample(min(1000, len(time_df)))
        
        color_col = 'C' if color_by == "C" else '‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå'
        fig = go.Figure(data=[go.Scatter3d(
            x=sample_df['rho'],
            y=sample_df['Time Step'],
            z=sample_df['‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢'],
            mode='markers',
            marker=dict(
                size=5,
                color=sample_df[color_col],
                colorscale='Viridis' if color_by == "C" else 'Blues',
                showscale=True,
                colorbar_title=color_by
            ),
            text=sample_df['‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå']
        )])
        fig.update_layout(
            title=f"‡∏Å‡∏£‡∏≤‡∏ü 3D: rho vs Time Step vs ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏™‡∏µ‡∏ï‡∏≤‡∏° {color_by})",
            scene=dict(
                xaxis_title="rho",
                yaxis_title="Time Step",
                zaxis_title="‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"
            )
        )
        st.plotly_chart(fig, use_container_width=True)
    
    else:  # 2D Time Series
        time_data = []
        for result in results:
            for t, avg in enumerate(result['averages']):
                if time_step_range[0] <= t <= time_step_range[1]:
                    time_data.append({
                        '‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå': result['‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå'],
                        'C': result['C'],
                        'rho': result['rho'],
                        '‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö': result['‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö'],
                        'Time Step': t,
                        '‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢': avg
                    })
        time_df = pd.DataFrame(time_data)
        
        if time_df.empty:
            st.error("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü Time Series")
            st.stop()
            
        color_col = 'C' if color_by == "C" else '‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå'
        fig = px.line(
            time_df,
            x="Time Step",
            y="‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢",
            color=color_col,
            facet_col="‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå" if color_by == "C" else None,
            facet_row="C" if color_by == "C" else None,
            title=f"‡∏Å‡∏£‡∏≤‡∏ü Time Series: Time Step vs ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏™‡∏µ‡∏ï‡∏≤‡∏° {color_by})"
        )
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
        fig.update_traces(opacity=0.5)
        st.plotly_chart(fig, use_container_width=True)

    st.download_button(
        label="‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô CSV",
        data=df.to_csv(index=False),
        file_name="simulation_results.csv",
        mime="text/csv"
    )

# ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á
if 'history' in st.session_state and len(st.session_state.history) > 1:
    st.header("üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á")
    for i, hist_df in enumerate(st.session_state.history):
        st.subheader(f"‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {i+1}")
        st.dataframe(hist_df.describe())